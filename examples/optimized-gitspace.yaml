# Gitspace Kubernetes 优化版本 - 单镜像实现
# 所有配置通过环境变量直接注入，不使用ConfigMap/Secret
# InitContainer和主容器使用同一个镜像

apiVersion: v1
kind: Namespace
metadata:
  name: gitness-gitspaces
---
# PVC: 持久化存储（代码和配置）
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitspace-demo
  namespace: gitness-gitspaces
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard  # 根据集群调整
---
# Deployment: Gitspace工作负载
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitspace-demo
  namespace: gitness-gitspaces
  labels:
    app: gitspace
    gitspace: demo
    component: workspace
  annotations:
    # 存储配置信息供状态恢复
    gitspace.harness.io/identifier: "demo"
    gitspace.harness.io/repoName: "my-project"
    gitspace.harness.io/branch: "main"
spec:
  replicas: 1  # 运行时为1，停止时改为0
  selector:
    matchLabels:
      app: gitspace
      gitspace: demo
  strategy:
    type: Recreate  # 避免多实例同时运行
  template:
    metadata:
      labels:
        app: gitspace
        gitspace: demo
        component: workspace
    spec:
      # Pod级别安全上下文
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

      # InitContainer: 运行时初始化（使用统一镜像）
      initContainers:
        - name: gitspace-init
          image: gitness/gitspace:latest  # 统一镜像
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/gitspace-init.sh"]  # 执行初始化脚本

          # 所有配置通过环境变量直接注入
          env:
            # Git仓库配置
            - name: REPO_URL
              value: "https://github.com/example/my-project.git"
            - name: BRANCH
              value: "main"
            - name: REPO_NAME
              value: "my-project"

            # Git凭证（可选，公开仓库不需要）
            - name: GIT_USERNAME
              value: "your-username"
            - name: GIT_PASSWORD
              value: "your-token-or-password"  # ⚠️ 生产环境建议使用Secret
            - name: GIT_HOST
              value: "github.com"
            - name: GIT_USER_EMAIL
              value: "user@example.com"

            # IDE配置
            - name: IDE_TYPE
              value: "vscode-web"
            - name: IDE_PORT
              value: "8089"

            # Gitspace标识
            - name: GITSPACE_IDENTIFIER
              value: "demo"

            # 访问密钥（可选）
            - name: GITSPACE_ACCESS_KEY
              value: "your-access-key-here"

          volumeMounts:
            - name: gitspace-storage
              mountPath: /workspace
            - name: shared
              mountPath: /shared

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi

          # 容器安全上下文
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

      # 主容器: IDE服务（使用统一镜像）
      containers:
        - name: gitspace
          image: gitness/gitspace:latest  # 统一镜像
          imagePullPolicy: IfNotPresent

          command:
            - /bin/bash
            - /shared/start.sh

          env:
            - name: GITSPACE_IDENTIFIER
              value: "demo"
            - name: GITSPACE_ACCESS_TYPE
              value: "app"

          ports:
            - name: ide
              containerPort: 8089
              protocol: TCP

          volumeMounts:
            - name: gitspace-storage
              mountPath: /home/vscode
            - name: shared
              mountPath: /shared

          workingDir: /home/vscode

          # 健康检查
          livenessProbe:
            exec:
              command:
                - pgrep
                - code-server
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /
              port: 8089
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 4Gi

          # 容器安全上下文
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

      # 卷定义
      volumes:
        - name: gitspace-storage
          persistentVolumeClaim:
            claimName: gitspace-demo
        - name: shared
          emptyDir: {}

      restartPolicy: Always
---
# Service: 暴露IDE服务
apiVersion: v1
kind: Service
metadata:
  name: gitspace-demo
  namespace: gitness-gitspaces
  labels:
    app: gitspace
    gitspace: demo
spec:
  type: ClusterIP
  selector:
    app: gitspace
    gitspace: demo
  ports:
    - name: ide
      port: 8089
      targetPort: 8089
      protocol: TCP
---
# Ingress: 外部访问（可选）
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitspace-demo
  namespace: gitness-gitspaces
  annotations:
    # 根据实际Ingress Controller调整
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  ingressClassName: nginx  # 根据集群调整
  rules:
    - host: gitspace-demo.example.com  # 修改为实际域名
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gitspace-demo
                port:
                  number: 8089
  # 可选: TLS配置
  # tls:
  #   - hosts:
  #       - gitspace-demo.example.com
  #     secretName: gitspace-demo-tls
